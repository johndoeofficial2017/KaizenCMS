@{
    Layout = null;
}
<script>
    function btnEditCMS_Case_Click(CaseRef) {
        var scope = angular.element(document.getElementById("widget-Inq_CaseArchive")).scope();
        scope.$apply(function () {
            scope.EditCase(CaseRef);
        });
    };
    function GetArchiveCaseKaizenPublicKey() {
        var scope = angular.element(document.getElementById("widget-Inq_CaseArchive")).scope();
        //alert(scope.MainFilter.TRXTypeID);
        return {
            TRXTypeID: scope.MainFilter.TRXTypeID,
            YearCode: scope.MainFilter.YearCode,
            PERIODID: scope.MainFilter.PERIODID,
            ViewID: scope.MainFilter.ViewID,
            Searchcritaria: scope.MainFilter.Searchcritaria,
            KaizenPublicKey: sessionStorage.PublicKey
        };
    }
    function StatusFilter(element) {
        var scope = angular.element(document.getElementById("widget-CMS_Case")).scope();
        element.kendoDropDownList({
            dataTextField: "CaseStatusname",
            dataValueField: "CaseStatusID",
            dataSource: scope.CaseStatuses,
            optionLabel: "--Select Status--"
        });
    };
</script>
@(Html.Kendo().Grid<Kaizen.CMS.CM20203>()
                        .Name("GridCMS_Inq_CaseArchive")
                         .Columns(columns =>
                            {
                                foreach (Kaizen.Configuration.Kaizen00026 column in ViewBag.KaizenGridViewColumn)
                                {
                                    switch (column.field.Trim())
                                    {
                                        case "CaseRef":
                                            columns.Bound(c => c.CaseRef).ClientTemplate(@"<a href='javascript:void(0)' onclick=""btnEditCMS_Case_Click('#:CaseRef#');""> #:CaseRef# </a>")
                                            .Width(column.width).Title(column.title).Locked(column.locked);
                                            break;
                                        case "ContractID":
                                            columns.Bound(c => c.ContractID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "ContractName":
                                            columns.Bound(c => c.ContractName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "ClientID":
                                            columns.Bound(c => c.ClientID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "ClientName":
                                            columns.Bound(c => c.ClientName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "NationaltyClient":
                                            columns.Bound(c => c.NationaltyClient).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "NationltyPartner":
                                            columns.Bound(c => c.NationltyPartner).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "NationaltyIDCIF":
                                            columns.Bound(c => c.NationaltyIDCIF).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "NationalityCase":
                                            columns.Bound(c => c.NationalityCase).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CreditorID":
                                            columns.Bound(c => c.CreditorID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CreditorName":
                                            columns.Bound(c => c.CreditorName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PartnerID":
                                            columns.Bound(c => c.PartnerID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PartnerName":
                                            columns.Bound(c => c.PartnerName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PartnrAssinDate":
                                            columns.Bound(c => c.PartnrAssinDate).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LegalID":
                                            columns.Bound(c => c.LegalID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LegalName":
                                            columns.Bound(c => c.LegalName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LegalAssignDate":
                                            columns.Bound(c => c.LegalAssignDate).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "BatchID":
                                            columns.Bound(c => c.BatchID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CurrencyCode":
                                            columns.Bound(c => c.CurrencyCode).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CIFNumber":
                                            columns.Bound(c => c.CIFNumber).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CIFName":
                                            columns.Bound(c => c.CIFName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CPRCRNo":
                                            columns.Bound(c => c.CPRCRNo).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PriorityID":
                                            columns.Bound(c => c.PriorityID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PriorityName":
                                            columns.Bound(c => c.PriorityName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "NPA":
                                            columns.Bound(c => c.NPA).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TaskComplated":
                                            columns.Bound(o => o.TaskComplated).Width(120).Title("Task Progress")
                                           .ClientTemplate(@"<div class='progress no-margin'><div class='# if(TaskComplated >= 0 && TaskComplated < 40) { #progress-bar bg-color-redLight# } else if (TaskComplated >= 40 && TaskComplated < 80) { #progress-bar bg-color-yellow# }
                                            else if (TaskComplated >= 80 && TaskComplated < 100) { #progress-bar bg-color-blue# } else if (TaskComplated == 100) { #progress-bar bg-color-greenLight# }#' role='progressbar' aria-valuetransitiongoal='#=TaskComplated #' aria-valuenow='#=TaskComplated #' aria-valuemin='0' aria-valuemax='100' style='width: #=TaskComplated#%'>
                                                #=PaymentProgress # %
                                            </div>
										</div>");
                                            break;
                                        case "MobileNo1":
                                            columns.Bound(c => c.MobileNo1).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "MobileNo2":
                                            columns.Bound(c => c.MobileNo2).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "IsJoint":
                                            columns.Bound(c => c.IsJoint).ClientTemplate("# if(IsJoint) { #" + "<font face='Webdings' size='2'>a</font># } else { #<font face='Webdings' size='2'>r</font># } #").Title("IsJoint").Filterable(false).Width(78).Locked(false).Lockable(false);
                                            break;
                                        case "IsHasHistory":
                                            columns.Bound(c => c.IsHasHistory).ClientTemplate("# if(IsJoint) { #" + "<font face='Webdings' size='2'>a</font># } else { #<font face='Webdings' size='2'>r</font># } #").Title("IsJoint").Filterable(false).Width(78).Locked(false).Lockable(false);
                                            break;
                                        case "CaseStatusID":
                                            columns.Bound(c => c.CaseStatusID).Filterable(filterable => filterable.UI("StatusFilter").Multi(true)).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CaseStatusChild":
                                            columns.Bound(c => c.CaseStatusChild).Filterable(filterable => filterable.UI("StatusFilter").Multi(true)).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CaseStatusname":
                                            columns.Bound(c => c.CaseStatusname).Width(100).Locked(column.locked).Title(column.title).Filterable(filterable => filterable.UI("StatusFilter"));
                                            break;
                                        case "CaseStatusChildName":
                                            columns.Bound(c => c.CaseStatusChildName).Width(100).Locked(column.locked).Title(column.title).Filterable(filterable => filterable.UI("StatusFilter"));
                                            break;
                                        case "CaseStatusComment":
                                            columns.Bound(c => c.CaseStatusComment).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "ReminderDateTime":
                                            columns.Bound(c => c.ReminderDateTime).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PTPAMT":
                                            columns.Bound(c => c.PTPAMT).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.PTPAMT,data.DecimalDigit) #")
                                          .HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "PTPBroken":
                                            columns.Bound(c => c.PTPBroken).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PTPkept":
                                            columns.Bound(c => c.PTPkept).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LastCaseStatusID":
                                            columns.Bound(c => c.LastCaseStatusID).Filterable(filterable => filterable.UI("StatusFilter").Multi(true)).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LastCasStatusChldID":
                                            columns.Bound(c => c.LastCasStatusChldID).Filterable(filterable => filterable.UI("StatusFilter").Multi(true)).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LastCasStatusname":
                                            columns.Bound(c => c.LastCasStatusname).Width(100).Locked(column.locked).Title(column.title).Filterable(filterable => filterable.UI("StatusFilter"));
                                            break;
                                        case "LastCasStatusChldNam":
                                            columns.Bound(c => c.LastCasStatusChldNam).Width(100).Locked(column.locked).Title(column.title).Filterable(filterable => filterable.UI("StatusFilter"));
                                            break;
                                        case "LastCasStatusComment":
                                            columns.Bound(c => c.LastCasStatusComment).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "MidCasStatusID":
                                            columns.Bound(c => c.MidCasStatusID).Filterable(filterable => filterable.UI("StatusFilter").Multi(true)).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "MidCasStatusChld":
                                            columns.Bound(c => c.MidCasStatusChld).Filterable(filterable => filterable.UI("StatusFilter").Multi(true)).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "MidCasStatusnam":
                                            columns.Bound(c => c.MidCasStatusnam).Width(100).Locked(column.locked).Title(column.title);
                                            break;
                                        case "MidCasStatusChldName":
                                            columns.Bound(c => c.MidCasStatusChldName).Width(100).Locked(column.locked).Title(column.title);
                                            break;
                                        case "MidCasStatusComment":
                                            columns.Bound(c => c.MidCasStatusComment).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CYCLEDAY":
                                            columns.Bound(c => c.CYCLEDAY).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "BucketPrev":
                                            columns.Bound(c => c.BucketPrev).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "BucketPrevName":
                                            columns.Bound(c => c.BucketPrevName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "BucketID":
                                            columns.Bound(c => c.BucketID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "BucketName":
                                            columns.Bound(c => c.BucketName).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Lookup01":
                                            columns.Bound(c => c.Lookup01).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Lookup01Name":
                                            columns.Bound(c => c.Lookup01Name).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Lookup02":
                                            columns.Bound(c => c.Lookup02).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Lookup02Name":
                                            columns.Bound(c => c.Lookup02Name).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "ProductID":
                                            columns.Bound(c => c.Lookup02).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "ProductName":
                                            columns.Bound(c => c.Lookup02Name).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TxtField01":
                                            columns.Bound(c => c.TxtField01).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TxtField02":
                                            columns.Bound(c => c.TxtField02).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TxtField03":
                                            columns.Bound(c => c.TxtField03).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TxtField04":
                                            columns.Bound(c => c.TxtField04).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TxtField05":
                                            columns.Bound(c => c.TxtField05).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TxtField06":
                                            columns.Bound(c => c.TxtField05).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TxtField07":
                                            columns.Bound(c => c.TxtField05).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CheckBoxField01":
                                            columns.Bound(c => c.CheckBoxField01).ClientTemplate("# if(data.CheckBoxField01) { #" + "<font face='Webdings' size='2'>a</font># } else { #<font face='Webdings' size='2'>r</font># } #").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CheckBoxField02":
                                            columns.Bound(c => c.CheckBoxField02).ClientTemplate("# if(data.CheckBoxField02) { #" + "<font face='Webdings' size='2'>a</font># } else { #<font face='Webdings' size='2'>r</font># } #").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "AMT01":
                                            columns.Bound(c => c.AMT01).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.AMT01,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "AMT02":
                                            columns.Bound(c => c.AMT02).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.AMT02,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "AMT03":
                                            columns.Bound(c => c.AMT03).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.AMT03,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "AMT04":
                                            columns.Bound(c => c.AMT04).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.AMT04,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "AMT05":
                                            columns.Bound(c => c.AMT05).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.AMT05,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "AMT06":
                                            columns.Bound(c => c.AMT06).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.AMT06,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "AMT07":
                                            columns.Bound(c => c.AMT07).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.AMT07,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "AMT08":
                                            columns.Bound(c => c.AMT08).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.AMT08,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "Date01":
                                            columns.Bound(c => c.Date01).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Date02":
                                            columns.Bound(c => c.Date02).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Date03":
                                            columns.Bound(c => c.Date03).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Date04":
                                            columns.Bound(c => c.Date04).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PrincipleAmount":
                                            columns.Bound(c => c.PrincipleAmount).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.PrincipleAmount,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "MaturityAmount":
                                            columns.Bound(c => c.PrincipleAmount).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.MaturityAmount,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "OutstandingAMT":
                                            columns.Bound(c => c.OutstandingAMT).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.OutstandingAMT,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "OutStandingToday":
                                            columns.Bound(c => c.OutStandingToday).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.OutStandingToday,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "InstallmentAmount":
                                            columns.Bound(c => c.InstallmentAmount).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.InstallmentAmount,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "ClaimAmount":
                                            columns.Bound(c => c.ClaimAmount).Width(column.width).Locked(column.locked).Title(column.title)
                                           .ClientTemplate("#= FormatDecimalDigit(data.ClaimAmount,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "FinanceCharge":
                                            columns.Bound(c => c.FinanceCharge).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.FinanceCharge,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "WriteOffAMT":
                                            columns.Bound(c => c.PrincipleAmount).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.WriteOffAMT,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "CreditLimit":
                                            columns.Bound(c => c.CreditLimit).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.CreditLimit,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "LastPaymentAMTUpload":
                                            columns.Bound(c => c.LastPaymentAMTUpload).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.LastPaymentAMTUpload,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "TotalLifeCollactedAMT":
                                            columns.Bound(c => c.TotalLifeCollactedAMT).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.TotalLifeCollactedAMT,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "CaseAccountNo":
                                            columns.Bound(c => c.CaseAccountNo).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "InvoiceNumber":
                                            columns.Bound(c => c.InvoiceNumber).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "OverDueDays":
                                            columns.Bound(c => c.OverDueDays).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "FirstDisburementDate":
                                            columns.Bound(c => c.FirstDisburementDate).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "MATURITY_DATE":
                                            columns.Bound(c => c.MATURITY_DATE).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "TransactionDate":
                                            columns.Bound(c => c.TransactionDate).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "OverDueDate":
                                            columns.Bound(c => c.OverDueDate).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LastPaymentDateUplod":
                                            columns.Bound(c => c.LastPaymentDateUplod).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "ClosingDate":
                                            columns.Bound(c => c.ClosingDate).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "BookingDate":
                                            columns.Bound(c => c.BookingDate).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "FirstLifeOverDueDate":
                                            columns.Bound(c => c.FirstLifeOverDueDate).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Remarks":
                                            columns.Bound(c => c.Remarks).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "AgentID":
                                            columns.Bound(c => c.AgentID).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "AssignDate":
                                            columns.Bound(c => c.AssignDate).Format("{0:dd/MM/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LastPaymentDate":
                                            columns.Bound(c => c.LastPaymentDate).Format("{0:MM/dd/yyyy}").Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "LastCallactedAMT":
                                            columns.Bound(c => c.LastCallactedAMT).Width(column.width).Locked(column.locked).Title(column.title)
                                          .ClientTemplate("#= FormatDecimalDigit(data.LastCallactedAMT,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "TotalCallactedAMT":
                                            columns.Bound(c => c.TotalCallactedAMT).Width(column.width).Locked(column.locked).Title(column.title)
                                         .ClientTemplate("#= FormatDecimalDigit(data.TotalCallactedAMT,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                        case "LastPaymentBy":
                                            columns.Bound(c => c.LastPaymentBy).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "AddressCode":
                                            columns.Bound(c => c.AddressCode).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CaseAddess":
                                            columns.Bound(c => c.CaseAddess).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "PaymentProgress":
                                            columns.Bound(o => o.PaymentProgress).Width(120).Title("Progress")
                                            .ClientTemplate(@"<div class='progress no-margin'><div class='# if(PaymentProgress >= 0 && PaymentProgress < 40) { #progress-bar bg-color-redLight# } else if (PaymentProgress >= 40 && PaymentProgress < 80) { #progress-bar bg-color-yellow# }
                                            else if (PaymentProgress >= 80 && PaymentProgress < 100) { #progress-bar bg-color-blue# } else if (PaymentProgress == 100) { #progress-bar bg-color-greenLight# }#' role='progressbar' aria-valuetransitiongoal='#=PaymentProgress #' aria-valuenow='#=PaymentProgress #' aria-valuemin='0' aria-valuemax='100' style='width: #=PaymentProgress#%'>
                                                #=PaymentProgress # %
                                            </div>
										</div>");
                                            break;
                                        case "CaseYear":
                                            columns.Bound(c => c.CaseYear).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CaseMonth":
                                            columns.Bound(c => c.CaseMonth).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "CaseDay":
                                            columns.Bound(c => c.CaseDay).Width(column.width).Locked(column.locked).Title(column.title);
                                            break;
                                        case "Balance":
                                            columns.Bound(c => c.Balance).Width(column.width).Locked(column.locked).Title(column.title)
                                         .ClientTemplate("#= FormatDecimalDigit(data.Balance,data.DecimalDigit) #").HtmlAttributes(new { style = "text-align:center;" });
                                            break;
                                    }
                                }
                            })
                  .Pageable(pager => pager.Messages(messages => messages.Display("Showing Transactions from {0} to {1}. Total GL Transactions: <strong>{2}</strong>")
        .ItemsPerPage("GL Transaction Per page").Empty("No cases Information")).Refresh(true)
        .PageSizes(true).Input(true).ButtonCount(5))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.SingleColumn))
        .Navigatable().Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Reorderable(reorder => reorder.Columns(true)).Resizable(ss => ss.Columns(true))
        .ColumnMenu().Scrollable().Filterable()
        .DataSource(dataSource => dataSource.Ajax().ServerOperation(true)
        .PageSize(20).Sort(sort => sort.Add(ss => ss.TrxID).Descending())
         
                .Read(read => read.Action("GetDataListGrid", "Inq_CaseArchive")
                .Type(HttpVerbs.Get).Data("GetArchiveCaseKaizenPublicKey"))
                .Model(model => model.Id(p => p.TrxID)))
)
<script>
    $(document).ready(function () {
        resizeGrid("GridCMS_Inq_CaseArchive");
    })
</script>
