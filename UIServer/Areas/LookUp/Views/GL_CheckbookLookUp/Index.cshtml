@{
    Layout = null;
}
<script>
    function btnSelect_Click(e) {
        e.preventDefault();
        try {
            var ActiveScreenID = $("#ActiveScreenID").val();
            var widget = $("#widget-" + ActiveScreenID)
            var data = this.dataItem($(e.currentTarget).closest("tr"));
            var scope = angular.element(widget).scope();
            scope.$apply(function () {
                scope.CheckbookBack(data);
            });
            var kendoWindow = $("#MainDialog").data("kendoWindow");
            kendoWindow.close();
        }
        catch (err) {
            alert("Error \n\n" + err.message);
        }
    };
    function GetGenericKaizenPublicKeyWithCurrency() {
        var FieldID = "-1";
        var FltrOperator = 8;

        var e = document.getElementById("DropFieldID");
        if (e != null)
            FieldID = e.options[e.selectedIndex].value;
        //----------------------------------------------------------------------------------
        var ObjDropFltrOperator = document.getElementById("DropFltrOperator");
        if (ObjDropFltrOperator != null)
            FltrOperator = ObjDropFltrOperator.options[ObjDropFltrOperator.selectedIndex].value;
        //----------------------------------------------------------------------------------
        var searchcritaria = $("#SearchcritariaPopUp").val();

        var ActiveScreenID = $("#ActiveScreenID").val();
        var widget = $("#widget-" + ActiveScreenID)
        var scope = angular.element(widget).scope();
        return {
            FieldID: FieldID,
            FltrOperator: FltrOperator,
            Searchcritaria: searchcritaria,
            CurrencyCode: scope.ParmObject,
            KaizenPublicKey: sessionStorage.PublicKey
        };
    };
    function RefreshGrid() {
        var grid = $("#GridGL_CheckbookPopUp").data("kendoGrid");
        grid.dataSource.read();
    };
</script>
<div class="panel panel-default">
    <div class="panel-body no-padding">
        <fieldset class="margin-15">
            <div class="form-group">
                <label class="col-sm-1 control-label text-center">Field</label>
                <div class="col-sm-2">
                    <select id="DropFieldID" class="form-control" style="height: auto;">
                        <option value="CheckbookCode">Checkbook Code</option>
                        <option value="CheckbookName">Checkbook Name</option>
                        <option value="CurrencyCode">Currency Code</option>
                        <option value="BankIBN">Bank IBN</option>
                        <option value="BankCode">Bank Code</option>
                        <option value="BankAccount">Bank Account</option>
                        <option value="ACTNUMBR">Account No.</option>
                        <option value="AccountID">Account ID</option>
                        <option value="-1" selected>All</option>
                    </select>
                </div>
                <label class="col-sm-1 control-label text-center">Operator</label>
                <div class="col-sm-2">
                    <select class="form-control" id="DropFltrOperator" style="height: auto;">
                        <option value="0">Is Less Than</option>
                        <option value="1">Is Less Than Or Equal To</option>
                        <option value="2">Is Equal To</option>
                        <option value="3">Is Not Equal To</option>
                        <option value="4">Is Greater Than Or Equal To</option>
                        <option value="5">Is Greater Than</option>
                        <option value="6">Starts With</option>
                        <option value="7">Ends With</option>
                        <option value="8" selected>Contains</option>
                        <option value="9">Is Contained In</option>
                        <option value="10">Does Not Contain</option>
                    </select>
                </div>
                <div class="col-sm-3 pull-right">
                    <div class="input-group">
                        <input class="form-control" id="SearchcritariaPopUp" type="text">
                        <div class="input-group-btn input-group-sm" onclick="RefreshGrid()">
                            <a href="javascript:void(0);" class="btn btn-default"><i class="glyphicon glyphicon-search"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </fieldset>
    </div>
    @(Html.Kendo().Grid<Kaizen.GL.GL00103>().Name("GridGL_CheckbookPopUp")
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.CheckbookCode).Title("Checkbook Code");
                        columns.Bound(c => c.CheckbookName).Title("Checkbook Name");
                        columns.Bound(c => c.CurrencyCode).Title("Currency Code");
                        columns.Bound(c => c.BankIBN).Title("Bank IBN");
                        columns.Bound(c => c.BankCode).Title("Bank Code");
                        columns.Command(command => command.Custom("Select").SendDataKeys(true)
                        .Click("btnSelect_Click"));
                    })
                        .Pageable(pager => pager.Messages(messages => messages.Display("Showing Checkbook from {0} to {1}. Total Checkbooks: <strong>{2}</strong>")
                        .ItemsPerPage("Checkbook Per page").Empty("No Checkbook Information")).Refresh(true).PageSizes(true).Input(true).ButtonCount(10))
                        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.SingleColumn))
                        .Navigatable()
                        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
                        .Reorderable(reorder => reorder.Columns(true))
                        .Resizable(ss => ss.Columns(true))
                        .ColumnMenu().Scrollable(s => s.Height(350)).Filterable()
                        .DataSource(dataSource => dataSource.Ajax().ServerOperation(true).PageSize(20)
                        .Read(read => read.Action("GetListGridWithCurrencyCode", "GL_CheckbookLookUp").Type(HttpVerbs.Get)
                        .Data("GetGenericKaizenPublicKeyWithCurrency"))
                        .Model(model =>
                        {
                            model.Id(o => o.CheckbookCode);
                            model.Field(o => o.CheckbookCode);
                            model.Field(o => o.CheckbookName);
                            model.Field(o => o.CurrencyCode);
                            model.Field(o => o.DecimalDigit);
                            model.Field(o => o.AccountID);
                            model.Field(o => o.ExchangeRate);
                            model.Field(o => o.ACTNUMBR);
                            model.Field(o => o.BankAccount);
                            model.Field(o => o.BankCode);
                            model.Field(o => o.BankIBN);
                            model.Field(o => o.CheckbookBalance);
                            model.Field(o => o.Inactive);
                            model.Field(o => o.IsOneSerialNumberSale);
                            model.Field(o => o.NextCheckLastNumber);
                            model.Field(o => o.NextCheckLenth);
                            model.Field(o => o.NextCheckPrefix);
                            model.Field(o => o.NextDepositLastNumber);
                            model.Field(o => o.NextDepositLenth);
                            model.Field(o => o.NextDepositPrefix);
                            model.Field(o => o.PayCashLastNumber);
                            model.Field(o => o.PayCashLenth);
                            model.Field(o => o.PayCashPrefix);
                            model.Field(o => o.PayCreditLastNumber);
                            model.Field(o => o.PayCreditLenth);
                            model.Field(o => o.PayCreditPrefix);
                            model.Field(o => o.PaymentExchangeTableID);
                        })
                        )
    )
</div>
